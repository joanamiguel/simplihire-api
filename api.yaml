openapi: 3.0.0
info:
  version: "1.0.0-oas3"
  title: API PEI - SimpliHire
  license:
    name: MIT
tags:
  - name: Recrutador
    description: Operações relativos aos recrutadores
  - name: Avalidador Técnico
    description: Operações relativos aos avaliadores técnicos
  - name: Candidatos
    description: Operações relativos aos candidatos
  - name: Empresa
    description: Operações relativos à empresa empregadora
servers:
  - url: http://localhost:3000
    description: Local machine
paths:
  #Empresa Recrutadora (Funcionalidades comuns)
  /auth/loginEmpregado:
    post:
      summary: Início de sessão
      description: >-
        Ao chamar este endpoint o utilizador de uma empresa empregadora é
        autentificado
      operationId: loginEmpresa
      tags:
        - Empresa
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:          
                  type: string
                  description: "Email do utilizador"
                password:    
                  type: string
                  description: "Password do utilizador"
            encoding:
              color:            # color=red,green,blue
                style: form
                explode: false            
      responses:
        '200':
          description: Mensagem a identificar sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginAnswer'
        '401':
          description: Password Errada / Utilizador não existente
  /auth/logoutEmpregado:
    get:
      summary: Terminar sessão
      description: >-
        Ao chamar este endpoint é terminada a sessão de um utilizador de uma
        empresa empregadora
      security:
        - jwtAuth: []
      operationId: logoutEmpresa
      tags:
        - Empresa
      responses:
        '200':
          description: Utilizador com sessão terminada
  /auth/registoEmpregado:
    post:
      summary: Criar conta de utilizador
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:          
                  type: string
                  description: "Email do utilizador"
                password:    
                  type: string
                  description: "Password do utilizador"
                dataNascimento:    
                  type: string
                  description: "Data de nascimento do utilizador (yyyy-mm-dd)"
                nome:    
                  type: string
                  description: "Nome do utilizador"
                idEmpresa:    
                  type: number
                  description: "ID da empresa do utilizador (consultar bd)"
            encoding:
              color:            # color=red,green,blue
                style: form
                explode: false
      description: >-
        Ao chamar este endpoint é criada a conta de um utilizador de uma
        empresa empregadora
      operationId: registoEmpresa
      tags:
        - Empresa
      responses:
        '200':
          description: Conta criada com sucesso
        '400':
          description: Erro no lado do cliente (falta de argumentos, data errada....)
        '500':
          description: Erro no lado do servidor
        '409':
          description: Utilizador já existente          
  '/propostas/{idProposta}/':
    get:
      summary: Informação de uma proposta
      description: Ao chamar este endpoint devolve informação de uma proposta de emprego
      operationId: getPropostaByID
      tags:
        - Empresa
      parameters:
        - name: idProposta
          in: path
          required: true
          description: O id da proposta a obter
          schema:
            type: string
      security:
        - jwtAuth: []
      responses:
        '200':
          description: Um candidato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Proposta'
  #Recrutador
  /propostas/propostasAdicionadas:
    get:
      summary: Propostas Adicionadas
      description: >-
        Ao chamar este endpoint devolve informações de todas as propostas
        adicionadas pela empresa
      operationId: propostasAdicionadas
      security:
        - jwtAuth: []
      tags:
        - Recrutador
      responses:
        '200':
          description: As propostas adicionadas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Propostas'
  /propostas/propostasPublicadas:
    get:
      summary: Propostas Adicionadas
      description: >-
        Ao chamar este endpoint devolve informações de todas as propostas
        publicadas pela empresa
      operationId: propostasPublicadas
      security:
        - jwtAuth: []
      tags:
        - Recrutador
      responses:
        '200':
          description: As propostas publicadas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Propostas'
  '/propostas/{idProposta}/publicar':
    put:
      summary: Publicação de uma proposta
      description: Ao chamar este endpoint uma proposta adicionada é públicada no sistema
      operationId: publishPropostaByID
      tags:
        - Recrutador
      parameters:
        - name: idProposta
          in: path
          required: true
          description: O id da proposta a publicar
          schema:
            type: string
      security:
        - jwtAuth: []
      responses:
        '200':
          description: Proposta publicada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: Proposta publicada com erro
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  '/propostas/{idProposta}/encerrar':
    put:
      summary: Encerramento de uma proposta
      description: Ao chamar este endpoint uma proposta adicionada é encerrada no sistema
      operationId: closePropostaByID
      tags:
        - Recrutador
      security:
        - jwtAuth: []
      parameters:
        - name: idProposta
          in: path
          required: true
          description: O id da proposta a encerrar
          schema:
            type: string
      
      responses:
        '200':
          description: Proposta encerrada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          description: Proposta encerrada com erro
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
  #Avaliador Técnico
  #Candidato
  '/candidatos/{idCandidato}/':
    get:
      summary: Informação de um candidato
      description: Ao chamar este endpoint devolve informação pessoal de um candidato
      operationId: getCandidatoById
      tags:
        - Candidatos
      parameters:
        - name: idCandidato
          in: path
          required: true
          description: O id do candidato a obter
          schema:
            type: string
      responses:
        '200':
          description: Um candidato
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Candidato'
  '/candidatos/{idCandidato}/propostas':
    get:
      summary: Lista de propostas do candidato
      description: Ao chamar este endpoint devolve a lista de propostas do candidato 
      operationId: getPropostasCandidato
      tags:
        - Candidatos
      parameters:
        - name: idCandidato
          in: path
          required: true
          description: O id do candidato a quem as propostas a obter pertencem
          schema:
            type: string
      responses:
        '200':
          description: Uma lista das propostas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Propostas'
  /auth/loginCandidatos:
    post:
      summary: Início de sessão do lado do candidato
      operationId: loginCandidatos
      tags:
        - Candidatos
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:          
                  type: string
                  description: "Email do candidato"
                password:    
                  type: string
                  description: "Password do candidato"
            encoding:
              color:            # color=red,green,blue
                style: form
                explode: false            
      responses:
        '200':
          description: Mensagem a identificar sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginAnswer'
        '401':
          description: Password Errada / Utilizador não existente
  
components:
  securitySchemes:
    jwtAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Candidato:
      required:
        - id
        - nome
        - email
        - universidade
      properties:
        id:
          type: integer
          format: int64
        nome:
          type: string
        email:
          type: string
        universidade:
          type: string
    Candidatos:
      type: array
      items:
        $ref: '#/components/schemas/Candidato'
    Proposta:
      required:
        - id
        - empresa
        - posicao
        - dataLimite
      properties:
        id:
          type: integer
          format: int64
        empresa:
          type: string
        posicao:
          type: string
        dataLimite:
          type: string
    Propostas:
      type: array
      items:
        $ref: '#/components/schemas/Proposta'
    Mensagem:
      required:
        - id
        - nome
        - email
        - universidade
      properties:
        id:
          type: integer
          format: int64
        nome:
          type: string
        email:
          type: string
        universidade:
          type: string
    LoginAnswer:
      required:
        - loggedIn
        - userType
      properties:
        loggedIn:
          type: boolean
        JWT:
          type: string
          description: JSON Web Token
    Status:
      description: Se o pedido efetuado teve sucesso ou erro
      required:
        - status
      properties:
        ok:
          type: boolean
          description: 'True se teve sucesso, False se houver erro'
        error:
          type: string
          description: Descrição de erro
    Exame_Técnico:
      required:
        - id
        - nome
        - email
        - universidade
      properties:
        id:
          type: integer
          format: int64
        nome:
          type: string
        email:
          type: string
        universidade:
          type: string
    Pergunta_Técnica:
      required:
        - id
        - nome
        - email
        - universidade
      properties:
        id:
          type: integer
          format: int64
        nome:
          type: string
        email:
          type: string
        universidade:
          type: string
